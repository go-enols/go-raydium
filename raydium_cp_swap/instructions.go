// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_cp_swap

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "RaydiumCpSwap"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	// # Arguments
	//
	// * `ctx`- The accounts needed by instruction.
	// * `index` - The index of amm config, there may be multiple config.
	// * `trade_fee_rate` - Trade fee rate, can be changed.
	// * `protocol_fee_rate` - The rate of protocol fee within tarde fee.
	// * `fund_fee_rate` - The rate of fund fee within tarde fee.
	//
	Instruction_CreateAmmConfig = ag_binary.TypeID([8]byte{137, 52, 237, 212, 215, 117, 108, 104})

	// Updates the owner of the amm config
	// Must be called by the current owner or admin
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `trade_fee_rate`- The new trade fee rate of amm config, be set when `param` is 0
	// * `protocol_fee_rate`- The new protocol fee rate of amm config, be set when `param` is 1
	// * `fund_fee_rate`- The new fund fee rate of amm config, be set when `param` is 2
	// * `new_owner`- The config's new owner, be set when `param` is 3
	// * `new_fund_owner`- The config's new fund owner, be set when `param` is 4
	// * `param`- The vaule can be 0 | 1 | 2 | 3 | 4, otherwise will report a error
	//
	Instruction_UpdateAmmConfig = ag_binary.TypeID([8]byte{49, 60, 174, 136, 154, 28, 116, 200})

	// Update pool status for given vaule
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `status` - The vaule of status
	//
	Instruction_UpdatePoolStatus = ag_binary.TypeID([8]byte{130, 87, 108, 6, 46, 224, 117, 123})

	// Collect the protocol fee accrued to the pool
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1
	// * `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0
	//
	Instruction_CollectProtocolFee = ag_binary.TypeID([8]byte{136, 136, 252, 221, 194, 66, 126, 89})

	// Collect the fund fee accrued to the pool
	//
	// # Arguments
	//
	// * `ctx` - The context of accounts
	// * `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1
	// * `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0
	//
	Instruction_CollectFundFee = ag_binary.TypeID([8]byte{167, 138, 78, 149, 223, 194, 6, 126})

	// Creates a pool for the given token pair and the initial price
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `init_amount_0` - the initial amount_0 to deposit
	// * `init_amount_1` - the initial amount_1 to deposit
	// * `open_time` - the timestamp allowed for swap
	//
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	// Creates a pool for the given token pair and the initial price
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `lp_token_amount` - Pool token amount to transfer. token_a and token_b amount are set by the current exchange rate and size of the pool
	// * `maximum_token_0_amount` -  Maximum token 0 amount to deposit, prevents excessive slippage
	// * `maximum_token_1_amount` - Maximum token 1 amount to deposit, prevents excessive slippage
	//
	Instruction_Deposit = ag_binary.TypeID([8]byte{242, 35, 198, 137, 82, 225, 242, 182})

	// Withdraw lp for token0 ande token1
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `lp_token_amount` - Amount of pool tokens to burn. User receives an output of token a and b based on the percentage of the pool tokens that are returned.
	// * `minimum_token_0_amount` -  Minimum amount of token 0 to receive, prevents excessive slippage
	// * `minimum_token_1_amount` -  Minimum amount of token 1 to receive, prevents excessive slippage
	//
	Instruction_Withdraw = ag_binary.TypeID([8]byte{183, 18, 70, 156, 148, 109, 161, 34})

	// Swap the tokens in the pool base input amount
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `amount_in` -  input amount to transfer, output to DESTINATION is based on the exchange rate
	// * `minimum_amount_out` -  Minimum amount of output token, prevents excessive slippage
	//
	Instruction_SwapBaseInput = ag_binary.TypeID([8]byte{143, 190, 90, 218, 196, 30, 51, 222})

	// Swap the tokens in the pool base output amount
	//
	// # Arguments
	//
	// * `ctx`- The context of accounts
	// * `max_amount_in` -  input amount prevents excessive slippage
	// * `amount_out` -  amount of output token
	//
	Instruction_SwapBaseOutput = ag_binary.TypeID([8]byte{55, 217, 98, 86, 163, 74, 180, 173})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_CreateAmmConfig:
		return "CreateAmmConfig"
	case Instruction_UpdateAmmConfig:
		return "UpdateAmmConfig"
	case Instruction_UpdatePoolStatus:
		return "UpdatePoolStatus"
	case Instruction_CollectProtocolFee:
		return "CollectProtocolFee"
	case Instruction_CollectFundFee:
		return "CollectFundFee"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_Deposit:
		return "Deposit"
	case Instruction_Withdraw:
		return "Withdraw"
	case Instruction_SwapBaseInput:
		return "SwapBaseInput"
	case Instruction_SwapBaseOutput:
		return "SwapBaseOutput"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"create_amm_config", (*CreateAmmConfig)(nil),
		},
		{
			"update_amm_config", (*UpdateAmmConfig)(nil),
		},
		{
			"update_pool_status", (*UpdatePoolStatus)(nil),
		},
		{
			"collect_protocol_fee", (*CollectProtocolFee)(nil),
		},
		{
			"collect_fund_fee", (*CollectFundFee)(nil),
		},
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"deposit", (*Deposit)(nil),
		},
		{
			"withdraw", (*Withdraw)(nil),
		},
		{
			"swap_base_input", (*SwapBaseInput)(nil),
		},
		{
			"swap_base_output", (*SwapBaseOutput)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
