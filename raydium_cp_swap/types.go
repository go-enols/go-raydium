// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_cp_swap

import ag_binary "github.com/gagliardetto/binary"

type Observation struct {
	// The block timestamp of the observation
	BlockTimestamp uint64

	// the cumulative of token0 price during the duration time, Q32.32, the remaining 64 bit for overflow
	CumulativeToken0PriceX32 ag_binary.Uint128

	// the cumulative of token1 price during the duration time, Q32.32, the remaining 64 bit for overflow
	CumulativeToken1PriceX32 ag_binary.Uint128
}

func (obj Observation) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `BlockTimestamp` param:
	err = encoder.Encode(obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Serialize `CumulativeToken0PriceX32` param:
	err = encoder.Encode(obj.CumulativeToken0PriceX32)
	if err != nil {
		return err
	}
	// Serialize `CumulativeToken1PriceX32` param:
	err = encoder.Encode(obj.CumulativeToken1PriceX32)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Observation) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `BlockTimestamp`:
	err = decoder.Decode(&obj.BlockTimestamp)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeToken0PriceX32`:
	err = decoder.Decode(&obj.CumulativeToken0PriceX32)
	if err != nil {
		return err
	}
	// Deserialize `CumulativeToken1PriceX32`:
	err = decoder.Decode(&obj.CumulativeToken1PriceX32)
	if err != nil {
		return err
	}
	return nil
}

type TradeDirection ag_binary.BorshEnum

const (
	TradeDirectionZeroForOne TradeDirection = iota
	TradeDirectionOneForZero
)

func (value TradeDirection) String() string {
	switch value {
	case TradeDirectionZeroForOne:
		return "ZeroForOne"
	case TradeDirectionOneForZero:
		return "OneForZero"
	default:
		return ""
	}
}

type RoundDirection ag_binary.BorshEnum

const (
	RoundDirectionFloor RoundDirection = iota
	RoundDirectionCeiling
)

func (value RoundDirection) String() string {
	switch value {
	case RoundDirectionFloor:
		return "Floor"
	case RoundDirectionCeiling:
		return "Ceiling"
	default:
		return ""
	}
}

type PoolStatusBitIndex ag_binary.BorshEnum

const (
	PoolStatusBitIndexDeposit PoolStatusBitIndex = iota
	PoolStatusBitIndexWithdraw
	PoolStatusBitIndexSwap
)

func (value PoolStatusBitIndex) String() string {
	switch value {
	case PoolStatusBitIndexDeposit:
		return "Deposit"
	case PoolStatusBitIndexWithdraw:
		return "Withdraw"
	case PoolStatusBitIndexSwap:
		return "Swap"
	default:
		return ""
	}
}

type PoolStatusBitFlag ag_binary.BorshEnum

const (
	PoolStatusBitFlagEnable PoolStatusBitFlag = iota
	PoolStatusBitFlagDisable
)

func (value PoolStatusBitFlag) String() string {
	switch value {
	case PoolStatusBitFlagEnable:
		return "Enable"
	case PoolStatusBitFlagDisable:
		return "Disable"
	default:
		return ""
	}
}
