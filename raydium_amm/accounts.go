// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_amm

import (
	"context"
	"errors"
	"encoding/json"
	"fmt"

	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	"github.com/gagliardetto/solana-go/rpc"
	"github.com/go-enols/go-log"
	"github.com/go-enols/gosolana"
)

type AmmStatus uint64

const (
	Uninitialized AmmStatus = iota
    Initialized 
    Disabled
    WithdrawOnly
    LiquidityOnly // pool only can add or remove liquidity, can't swap and plan orders
    OrderBookOnly// pool only can add or remove liquidity and plan orders, can't swap
    SwapOnly // pool only can add or remove liquidity and swap, can't plan orders
    WaitingTrade // pool status after created and will auto update to SwapOnly during swap after open_time
)

type TargetOrders struct {
	Owner                [4]uint64
	BuyOrders            [50]TargetOrder
	Padding1             [8]uint64
	TargetX              ag_binary.Uint128
	TargetY              ag_binary.Uint128
	PlanXBuy             ag_binary.Uint128
	PlanYBuy             ag_binary.Uint128
	PlanXSell            ag_binary.Uint128
	PlanYSell            ag_binary.Uint128
	PlacedX              ag_binary.Uint128
	PlacedY              ag_binary.Uint128
	CalcPnlX             ag_binary.Uint128
	CalcPnlY             ag_binary.Uint128
	SellOrders           [50]TargetOrder
	Padding2             [6]uint64
	ReplaceBuyClientId   [10]uint64
	ReplaceSellClientId  [10]uint64
	LastOrderNumerator   uint64
	LastOrderDenominator uint64
	PlanOrdersCur        uint64
	PlaceOrdersCur       uint64
	ValidBuyOrderNum     uint64
	ValidSellOrderNum    uint64
	Padding3             [10]uint64
	FreeSlotBits         ag_binary.Uint128
}

var TargetOrdersDiscriminator = [8]byte{113, 225, 140, 255, 65, 144, 239, 231}

func (obj TargetOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TargetOrdersDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `BuyOrders` param:
	err = encoder.Encode(obj.BuyOrders)
	if err != nil {
		return err
	}
	// Serialize `Padding1` param:
	err = encoder.Encode(obj.Padding1)
	if err != nil {
		return err
	}
	// Serialize `TargetX` param:
	err = encoder.Encode(obj.TargetX)
	if err != nil {
		return err
	}
	// Serialize `TargetY` param:
	err = encoder.Encode(obj.TargetY)
	if err != nil {
		return err
	}
	// Serialize `PlanXBuy` param:
	err = encoder.Encode(obj.PlanXBuy)
	if err != nil {
		return err
	}
	// Serialize `PlanYBuy` param:
	err = encoder.Encode(obj.PlanYBuy)
	if err != nil {
		return err
	}
	// Serialize `PlanXSell` param:
	err = encoder.Encode(obj.PlanXSell)
	if err != nil {
		return err
	}
	// Serialize `PlanYSell` param:
	err = encoder.Encode(obj.PlanYSell)
	if err != nil {
		return err
	}
	// Serialize `PlacedX` param:
	err = encoder.Encode(obj.PlacedX)
	if err != nil {
		return err
	}
	// Serialize `PlacedY` param:
	err = encoder.Encode(obj.PlacedY)
	if err != nil {
		return err
	}
	// Serialize `CalcPnlX` param:
	err = encoder.Encode(obj.CalcPnlX)
	if err != nil {
		return err
	}
	// Serialize `CalcPnlY` param:
	err = encoder.Encode(obj.CalcPnlY)
	if err != nil {
		return err
	}
	// Serialize `SellOrders` param:
	err = encoder.Encode(obj.SellOrders)
	if err != nil {
		return err
	}
	// Serialize `Padding2` param:
	err = encoder.Encode(obj.Padding2)
	if err != nil {
		return err
	}
	// Serialize `ReplaceBuyClientId` param:
	err = encoder.Encode(obj.ReplaceBuyClientId)
	if err != nil {
		return err
	}
	// Serialize `ReplaceSellClientId` param:
	err = encoder.Encode(obj.ReplaceSellClientId)
	if err != nil {
		return err
	}
	// Serialize `LastOrderNumerator` param:
	err = encoder.Encode(obj.LastOrderNumerator)
	if err != nil {
		return err
	}
	// Serialize `LastOrderDenominator` param:
	err = encoder.Encode(obj.LastOrderDenominator)
	if err != nil {
		return err
	}
	// Serialize `PlanOrdersCur` param:
	err = encoder.Encode(obj.PlanOrdersCur)
	if err != nil {
		return err
	}
	// Serialize `PlaceOrdersCur` param:
	err = encoder.Encode(obj.PlaceOrdersCur)
	if err != nil {
		return err
	}
	// Serialize `ValidBuyOrderNum` param:
	err = encoder.Encode(obj.ValidBuyOrderNum)
	if err != nil {
		return err
	}
	// Serialize `ValidSellOrderNum` param:
	err = encoder.Encode(obj.ValidSellOrderNum)
	if err != nil {
		return err
	}
	// Serialize `Padding3` param:
	err = encoder.Encode(obj.Padding3)
	if err != nil {
		return err
	}
	// Serialize `FreeSlotBits` param:
	err = encoder.Encode(obj.FreeSlotBits)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TargetOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TargetOrdersDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[113 225 140 255 65 144 239 231]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `BuyOrders`:
	err = decoder.Decode(&obj.BuyOrders)
	if err != nil {
		return err
	}
	// Deserialize `Padding1`:
	err = decoder.Decode(&obj.Padding1)
	if err != nil {
		return err
	}
	// Deserialize `TargetX`:
	err = decoder.Decode(&obj.TargetX)
	if err != nil {
		return err
	}
	// Deserialize `TargetY`:
	err = decoder.Decode(&obj.TargetY)
	if err != nil {
		return err
	}
	// Deserialize `PlanXBuy`:
	err = decoder.Decode(&obj.PlanXBuy)
	if err != nil {
		return err
	}
	// Deserialize `PlanYBuy`:
	err = decoder.Decode(&obj.PlanYBuy)
	if err != nil {
		return err
	}
	// Deserialize `PlanXSell`:
	err = decoder.Decode(&obj.PlanXSell)
	if err != nil {
		return err
	}
	// Deserialize `PlanYSell`:
	err = decoder.Decode(&obj.PlanYSell)
	if err != nil {
		return err
	}
	// Deserialize `PlacedX`:
	err = decoder.Decode(&obj.PlacedX)
	if err != nil {
		return err
	}
	// Deserialize `PlacedY`:
	err = decoder.Decode(&obj.PlacedY)
	if err != nil {
		return err
	}
	// Deserialize `CalcPnlX`:
	err = decoder.Decode(&obj.CalcPnlX)
	if err != nil {
		return err
	}
	// Deserialize `CalcPnlY`:
	err = decoder.Decode(&obj.CalcPnlY)
	if err != nil {
		return err
	}
	// Deserialize `SellOrders`:
	err = decoder.Decode(&obj.SellOrders)
	if err != nil {
		return err
	}
	// Deserialize `Padding2`:
	err = decoder.Decode(&obj.Padding2)
	if err != nil {
		return err
	}
	// Deserialize `ReplaceBuyClientId`:
	err = decoder.Decode(&obj.ReplaceBuyClientId)
	if err != nil {
		return err
	}
	// Deserialize `ReplaceSellClientId`:
	err = decoder.Decode(&obj.ReplaceSellClientId)
	if err != nil {
		return err
	}
	// Deserialize `LastOrderNumerator`:
	err = decoder.Decode(&obj.LastOrderNumerator)
	if err != nil {
		return err
	}
	// Deserialize `LastOrderDenominator`:
	err = decoder.Decode(&obj.LastOrderDenominator)
	if err != nil {
		return err
	}
	// Deserialize `PlanOrdersCur`:
	err = decoder.Decode(&obj.PlanOrdersCur)
	if err != nil {
		return err
	}
	// Deserialize `PlaceOrdersCur`:
	err = decoder.Decode(&obj.PlaceOrdersCur)
	if err != nil {
		return err
	}
	// Deserialize `ValidBuyOrderNum`:
	err = decoder.Decode(&obj.ValidBuyOrderNum)
	if err != nil {
		return err
	}
	// Deserialize `ValidSellOrderNum`:
	err = decoder.Decode(&obj.ValidSellOrderNum)
	if err != nil {
		return err
	}
	// Deserialize `Padding3`:
	err = decoder.Decode(&obj.Padding3)
	if err != nil {
		return err
	}
	// Deserialize `FreeSlotBits`:
	err = decoder.Decode(&obj.FreeSlotBits)
	if err != nil {
		return err
	}
	return nil
}

type Fees struct {
	MinSeparateNumerator   uint64
	MinSeparateDenominator uint64
	TradeFeeNumerator      uint64
	TradeFeeDenominator    uint64
	PnlNumerator           uint64
	PnlDenominator         uint64
	SwapFeeNumerator       uint64
	SwapFeeDenominator     uint64
}

var FeesDiscriminator = [8]byte{151, 157, 50, 115, 130, 72, 179, 36}

func (obj Fees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(FeesDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `MinSeparateNumerator` param:
	err = encoder.Encode(obj.MinSeparateNumerator)
	if err != nil {
		return err
	}
	// Serialize `MinSeparateDenominator` param:
	err = encoder.Encode(obj.MinSeparateDenominator)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeNumerator` param:
	err = encoder.Encode(obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `TradeFeeDenominator` param:
	err = encoder.Encode(obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Serialize `PnlNumerator` param:
	err = encoder.Encode(obj.PnlNumerator)
	if err != nil {
		return err
	}
	// Serialize `PnlDenominator` param:
	err = encoder.Encode(obj.PnlDenominator)
	if err != nil {
		return err
	}
	// Serialize `SwapFeeNumerator` param:
	err = encoder.Encode(obj.SwapFeeNumerator)
	if err != nil {
		return err
	}
	// Serialize `SwapFeeDenominator` param:
	err = encoder.Encode(obj.SwapFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Fees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	// {
	// 	discriminator, err := decoder.ReadTypeID()
	// 	if err != nil {
	// 		return err
	// 	}
	// 	if !discriminator.Equal(FeesDiscriminator[:]) {
	// 		return fmt.Errorf(
	// 			"wrong discriminator: wanted %s, got %s",
	// 			"[151 157 50 115 130 72 179 36]",
	// 			fmt.Sprint(discriminator[:]))
	// 	}
	// }
	// Deserialize `MinSeparateNumerator`:
	err = decoder.Decode(&obj.MinSeparateNumerator)
	if err != nil {
		return err
	}
	// Deserialize `MinSeparateDenominator`:
	err = decoder.Decode(&obj.MinSeparateDenominator)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeNumerator`:
	err = decoder.Decode(&obj.TradeFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `TradeFeeDenominator`:
	err = decoder.Decode(&obj.TradeFeeDenominator)
	if err != nil {
		return err
	}
	// Deserialize `PnlNumerator`:
	err = decoder.Decode(&obj.PnlNumerator)
	if err != nil {
		return err
	}
	// Deserialize `PnlDenominator`:
	err = decoder.Decode(&obj.PnlDenominator)
	if err != nil {
		return err
	}
	// Deserialize `SwapFeeNumerator`:
	err = decoder.Decode(&obj.SwapFeeNumerator)
	if err != nil {
		return err
	}
	// Deserialize `SwapFeeDenominator`:
	err = decoder.Decode(&obj.SwapFeeDenominator)
	if err != nil {
		return err
	}
	return nil
}

type AmmInfo struct {
	Status             AmmStatus
	Nonce              uint64
	OrderNum           uint64
	Depth              uint64
	CoinDecimals       uint64
	PcDecimals         uint64
	State              uint64
	ResetFlag          uint64
	MinSize            uint64
	VolMaxCutRatio     uint64
	AmountWave         uint64
	CoinLotSize        uint64
	PcLotSize          uint64
	MinPriceMultiplier uint64
	MaxPriceMultiplier uint64
	SysDecimalValue    uint64
	Fees               Fees
	OutPut             OutPutData
	TokenCoin          ag_solanago.PublicKey
	TokenPc            ag_solanago.PublicKey
	CoinMint           ag_solanago.PublicKey
	PcMint             ag_solanago.PublicKey
	LpMint             ag_solanago.PublicKey
	OpenOrders         ag_solanago.PublicKey
	Market             ag_solanago.PublicKey
	SerumDex           ag_solanago.PublicKey
	TargetOrders       ag_solanago.PublicKey
	WithdrawQueue      ag_solanago.PublicKey
	TokenTempLp        ag_solanago.PublicKey
	AmmOwner           ag_solanago.PublicKey
	LpAmount           uint64
	ClientOrderId      uint64
	Padding            [2]uint64
}

var AmmInfoDiscriminator = [8]byte{33, 217, 2, 203, 184, 83, 235, 91}

func (obj AmmInfo) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AmmInfoDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Nonce` param:
	err = encoder.Encode(obj.Nonce)
	if err != nil {
		return err
	}
	// Serialize `OrderNum` param:
	err = encoder.Encode(obj.OrderNum)
	if err != nil {
		return err
	}
	// Serialize `Depth` param:
	err = encoder.Encode(obj.Depth)
	if err != nil {
		return err
	}
	// Serialize `CoinDecimals` param:
	err = encoder.Encode(obj.CoinDecimals)
	if err != nil {
		return err
	}
	// Serialize `PcDecimals` param:
	err = encoder.Encode(obj.PcDecimals)
	if err != nil {
		return err
	}
	// Serialize `State` param:
	err = encoder.Encode(obj.State)
	if err != nil {
		return err
	}
	// Serialize `ResetFlag` param:
	err = encoder.Encode(obj.ResetFlag)
	if err != nil {
		return err
	}
	// Serialize `MinSize` param:
	err = encoder.Encode(obj.MinSize)
	if err != nil {
		return err
	}
	// Serialize `VolMaxCutRatio` param:
	err = encoder.Encode(obj.VolMaxCutRatio)
	if err != nil {
		return err
	}
	// Serialize `AmountWave` param:
	err = encoder.Encode(obj.AmountWave)
	if err != nil {
		return err
	}
	// Serialize `CoinLotSize` param:
	err = encoder.Encode(obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Serialize `PcLotSize` param:
	err = encoder.Encode(obj.PcLotSize)
	if err != nil {
		return err
	}
	// Serialize `MinPriceMultiplier` param:
	err = encoder.Encode(obj.MinPriceMultiplier)
	if err != nil {
		return err
	}
	// Serialize `MaxPriceMultiplier` param:
	err = encoder.Encode(obj.MaxPriceMultiplier)
	if err != nil {
		return err
	}
	// Serialize `SysDecimalValue` param:
	err = encoder.Encode(obj.SysDecimalValue)
	if err != nil {
		return err
	}
	// Serialize `Fees` param:
	err = encoder.Encode(obj.Fees)
	if err != nil {
		return err
	}
	// Serialize `OutPut` param:
	err = encoder.Encode(obj.OutPut)
	if err != nil {
		return err
	}
	// Serialize `TokenCoin` param:
	err = encoder.Encode(obj.TokenCoin)
	if err != nil {
		return err
	}
	// Serialize `TokenPc` param:
	err = encoder.Encode(obj.TokenPc)
	if err != nil {
		return err
	}
	// Serialize `CoinMint` param:
	err = encoder.Encode(obj.CoinMint)
	if err != nil {
		return err
	}
	// Serialize `PcMint` param:
	err = encoder.Encode(obj.PcMint)
	if err != nil {
		return err
	}
	// Serialize `LpMint` param:
	err = encoder.Encode(obj.LpMint)
	if err != nil {
		return err
	}
	// Serialize `OpenOrders` param:
	err = encoder.Encode(obj.OpenOrders)
	if err != nil {
		return err
	}
	// Serialize `Market` param:
	err = encoder.Encode(obj.Market)
	if err != nil {
		return err
	}
	// Serialize `SerumDex` param:
	err = encoder.Encode(obj.SerumDex)
	if err != nil {
		return err
	}
	// Serialize `TargetOrders` param:
	err = encoder.Encode(obj.TargetOrders)
	if err != nil {
		return err
	}
	// Serialize `WithdrawQueue` param:
	err = encoder.Encode(obj.WithdrawQueue)
	if err != nil {
		return err
	}
	// Serialize `TokenTempLp` param:
	err = encoder.Encode(obj.TokenTempLp)
	if err != nil {
		return err
	}
	// Serialize `AmmOwner` param:
	err = encoder.Encode(obj.AmmOwner)
	if err != nil {
		return err
	}
	// Serialize `LpAmount` param:
	err = encoder.Encode(obj.LpAmount)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AmmInfo) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	// 这里好像存在一些问题，对应AmmV4无法查询
	// {
	// 	discriminator, err := decoder.ReadTypeID()
	// 	if err != nil {
	// 		return err
	// 	}
	// 	if !discriminator.Equal(AmmInfoDiscriminator[:]) {
	// 		return fmt.Errorf(
	// 			"wrong discriminator: wanted %s, got %s",
	// 			"[33 217 2 203 184 83 235 91]",
	// 			fmt.Sprint(discriminator[:]))
	// 	}
	// }
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}

	{ // 检查池状态
		switch obj.Status{
		case Uninitialized:
			return errors.New("池还未初始化")
		case Initialized:
			log.Warning("当前池还在初始化中...")
		case Disabled:
			log.Warning("当前池已禁用")
		case WithdrawOnly:
			log.Warning("当前池只允许提现")
		case LiquidityOnly:
			log.Warning("当前池无法进行交换，只允许增加或减少流动性")
		case OrderBookOnly:
			log.Warning("当前池无法进行交换，只允许增加或减少流动性与计划订单")
		case SwapOnly:
			log.Warning("当前池无法进行计划订单，只允许增加或减少流动性与交换")
		case WaitingTrade:
			log.Warning("当前池还未到开放时间")
		default:
			log.Warning("未知的池状态，可能是错误的数据")
			return errors.New("未知的池状态")
		}
	}

	// Deserialize `Nonce`:
	err = decoder.Decode(&obj.Nonce)
	if err != nil {
		return err
	}
	// Deserialize `OrderNum`:
	err = decoder.Decode(&obj.OrderNum)
	if err != nil {
		return err
	}
	// Deserialize `Depth`:
	err = decoder.Decode(&obj.Depth)
	if err != nil {
		return err
	}
	// Deserialize `CoinDecimals`:
	err = decoder.Decode(&obj.CoinDecimals)
	if err != nil {
		return err
	}
	// Deserialize `PcDecimals`:
	err = decoder.Decode(&obj.PcDecimals)
	if err != nil {
		return err
	}
	// Deserialize `State`:
	err = decoder.Decode(&obj.State)
	if err != nil {
		return err
	}
	// Deserialize `ResetFlag`:
	err = decoder.Decode(&obj.ResetFlag)
	if err != nil {
		return err
	}
	// Deserialize `MinSize`:
	err = decoder.Decode(&obj.MinSize)
	if err != nil {
		return err
	}
	// Deserialize `VolMaxCutRatio`:
	err = decoder.Decode(&obj.VolMaxCutRatio)
	if err != nil {
		return err
	}
	// Deserialize `AmountWave`:
	err = decoder.Decode(&obj.AmountWave)
	if err != nil {
		return err
	}
	// Deserialize `CoinLotSize`:
	err = decoder.Decode(&obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Deserialize `PcLotSize`:
	err = decoder.Decode(&obj.PcLotSize)
	if err != nil {
		return err
	}
	// Deserialize `MinPriceMultiplier`:
	err = decoder.Decode(&obj.MinPriceMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `MaxPriceMultiplier`:
	err = decoder.Decode(&obj.MaxPriceMultiplier)
	if err != nil {
		return err
	}
	// Deserialize `SysDecimalValue`:
	err = decoder.Decode(&obj.SysDecimalValue)
	if err != nil {
		return err
	}
	// Deserialize `Fees`:
	err = decoder.Decode(&obj.Fees)
	if err != nil {
		return err
	}
	// Deserialize `OutPut`:
	err = decoder.Decode(&obj.OutPut)
	if err != nil {
		return err
	}
	// Deserialize `TokenCoin`:
	err = decoder.Decode(&obj.TokenCoin)
	if err != nil {
		return err
	}
	// Deserialize `TokenPc`:
	err = decoder.Decode(&obj.TokenPc)
	if err != nil {
		return err
	}
	// Deserialize `CoinMint`:
	err = decoder.Decode(&obj.CoinMint)
	if err != nil {
		return err
	}
	// Deserialize `PcMint`:
	err = decoder.Decode(&obj.PcMint)
	if err != nil {
		return err
	}
	// Deserialize `LpMint`:
	err = decoder.Decode(&obj.LpMint)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrders`:
	err = decoder.Decode(&obj.OpenOrders)
	if err != nil {
		return err
	}
	// Deserialize `Market`:
	err = decoder.Decode(&obj.Market)
	if err != nil {
		return err
	}
	// Deserialize `SerumDex`:
	err = decoder.Decode(&obj.SerumDex)
	if err != nil {
		return err
	}
	// Deserialize `TargetOrders`:
	err = decoder.Decode(&obj.TargetOrders)
	if err != nil {
		return err
	}
	// Deserialize `WithdrawQueue`:
	err = decoder.Decode(&obj.WithdrawQueue)
	if err != nil {
		return err
	}
	// Deserialize `TokenTempLp`:
	err = decoder.Decode(&obj.TokenTempLp)
	if err != nil {
		return err
	}
	// Deserialize `AmmOwner`:
	err = decoder.Decode(&obj.AmmOwner)
	if err != nil {
		return err
	}
	// Deserialize `LpAmount`:
	err = decoder.Decode(&obj.LpAmount)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type AmmPriceInfo struct{
	BaseAmount float64
	QuoteAmount float64
	BaseDecimals int
	QuoteDecimals int
	BaseName string
	QuoteName string
}
func (obj *AmmInfo) PriceInfo(ctx context.Context, client *rpc.Client)(*AmmPriceInfo, error){
	amounts, err := GetMultipleAccountsBalances(ctx, client, [2]ag_solanago.PublicKey{
		obj.TokenCoin, obj.TokenPc,
	})
	if err != nil {
		return nil, errors.New("获取池子流动性失败")
	}
	meta0, err := gosolana.GetTokenMetaOnChain(ctx, client, obj.CoinMint)
	if err != nil {
		return nil,err
	}
	meta1, err := gosolana.GetTokenMetaOnChain(ctx, client, obj.PcMint)
	if err != nil {
		return nil, err
	}
	return &AmmPriceInfo{
		BaseAmount:  amounts[0].Parsed.Info.TokenAmount.UIAmount,
		QuoteAmount:  amounts[1].Parsed.Info.TokenAmount.UIAmount,
		BaseDecimals: amounts[0].Parsed.Info.TokenAmount.Decimals,
		QuoteDecimals: amounts[1].Parsed.Info.TokenAmount.Decimals,
		BaseName: meta0.Symbol,
		QuoteName: meta1.Symbol,
	}, nil
}

type AmmV4Account struct {
	Program string `json:"program"`
	Parsed  struct {
		Info struct {
			IsNative    bool   `json:"isNative"`
			Mint        string `json:"mint"`
			Owner       string `json:"owner"`
			State       string `json:"state"`
			TokenAmount struct {
				Amount         string  `json:"amount"`
				Decimals       int     `json:"decimals"`
				UIAmount       float64 `json:"uiAmount"`
				UIAmountString string  `json:"uiAmountString"`
			} `json:"tokenAmount"`
		} `json:"info"`
		Type string `json:"type"`
	} `json:"parsed"`
	Space int `json:"space"`
}


// 查询多个 SPL Token 账户余额（返回 UiAmount 数组，顺序与输入一致）
func GetMultipleAccountsBalances(ctx context.Context, client *rpc.Client, accounts [2]ag_solanago.PublicKey) ([]*AmmV4Account, error) {
	balancesResponse, err := client.GetMultipleAccountsWithOpts(
		ctx, accounts[:], &rpc.GetMultipleAccountsOpts{
			Encoding:   ag_solanago.EncodingJSONParsed,
			Commitment: rpc.CommitmentProcessed,
		},
	)
	if err != nil || len(balancesResponse.Value) != 2 || balancesResponse.Value[0] == nil || balancesResponse.Value[1] == nil {
		return nil, errors.New("failed to get vault balances")
	}
	amount0 := new(AmmV4Account)
	if err := json.Unmarshal(balancesResponse.Value[0].Data.GetRawJSON(), amount0); err != nil {
		log.Printf("解析 Quote 账户数据失败: %v, 原始数据: %s", err, string(balancesResponse.Value[0].Data.GetRawJSON()))
		return nil, err
	}
	amount1 := new(AmmV4Account)
	if err := json.Unmarshal(balancesResponse.Value[1].Data.GetRawJSON(), amount1); err != nil {
		log.Printf("解析 Base 账户数据失败: %v, 原始数据: %s", err, string(balancesResponse.Value[1].Data.GetRawJSON()))
		return nil, err
	}
	return []*AmmV4Account{
		amount0, amount1,
	}, nil
}
