// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package raydium_cp_swap

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Collect the fund fee accrued to the pool
//
// # Arguments
//
// * `ctx` - The context of accounts
// * `amount_0_requested` - The maximum amount of token_0 to send, can be 0 to collect fees in only token_1
// * `amount_1_requested` - The maximum amount of token_1 to send, can be 0 to collect fees in only token_0
//
type CollectFundFee struct {
	Amount0Requested *uint64
	Amount1Requested *uint64

	// [0] = [SIGNER] owner
	// ··········· Only admin or fund_owner can collect fee now
	//
	// [1] = [] authority
	//
	// [2] = [WRITE] poolState
	// ··········· Pool state stores accumulated protocol fee amount
	//
	// [3] = [] ammConfig
	// ··········· Amm config account stores fund_owner
	//
	// [4] = [WRITE] token0Vault
	// ··········· The address that holds pool tokens for token_0
	//
	// [5] = [WRITE] token1Vault
	// ··········· The address that holds pool tokens for token_1
	//
	// [6] = [] vault0Mint
	// ··········· The mint of token_0 vault
	//
	// [7] = [] vault1Mint
	// ··········· The mint of token_1 vault
	//
	// [8] = [WRITE] recipientToken0Account
	// ··········· The address that receives the collected token_0 fund fees
	//
	// [9] = [WRITE] recipientToken1Account
	// ··········· The address that receives the collected token_1 fund fees
	//
	// [10] = [] tokenProgram
	// ··········· The SPL program to perform token transfers
	//
	// [11] = [] tokenProgram2022
	// ··········· The SPL program 2022 to perform token transfers
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCollectFundFeeInstructionBuilder creates a new `CollectFundFee` instruction builder.
func NewCollectFundFeeInstructionBuilder() *CollectFundFee {
	nd := &CollectFundFee{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetAmount0Requested sets the "amount0Requested" parameter.
func (inst *CollectFundFee) SetAmount0Requested(amount0Requested uint64) *CollectFundFee {
	inst.Amount0Requested = &amount0Requested
	return inst
}

// SetAmount1Requested sets the "amount1Requested" parameter.
func (inst *CollectFundFee) SetAmount1Requested(amount1Requested uint64) *CollectFundFee {
	inst.Amount1Requested = &amount1Requested
	return inst
}

// SetOwnerAccount sets the "owner" account.
// Only admin or fund_owner can collect fee now
func (inst *CollectFundFee) SetOwnerAccount(owner ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// Only admin or fund_owner can collect fee now
func (inst *CollectFundFee) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CollectFundFee) SetAuthorityAccount(authority ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CollectFundFee) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPoolStateAccount sets the "poolState" account.
// Pool state stores accumulated protocol fee amount
func (inst *CollectFundFee) SetPoolStateAccount(poolState ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(poolState).WRITE()
	return inst
}

// GetPoolStateAccount gets the "poolState" account.
// Pool state stores accumulated protocol fee amount
func (inst *CollectFundFee) GetPoolStateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAmmConfigAccount sets the "ammConfig" account.
// Amm config account stores fund_owner
func (inst *CollectFundFee) SetAmmConfigAccount(ammConfig ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(ammConfig)
	return inst
}

// GetAmmConfigAccount gets the "ammConfig" account.
// Amm config account stores fund_owner
func (inst *CollectFundFee) GetAmmConfigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetToken0VaultAccount sets the "token0Vault" account.
// The address that holds pool tokens for token_0
func (inst *CollectFundFee) SetToken0VaultAccount(token0Vault ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(token0Vault).WRITE()
	return inst
}

// GetToken0VaultAccount gets the "token0Vault" account.
// The address that holds pool tokens for token_0
func (inst *CollectFundFee) GetToken0VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetToken1VaultAccount sets the "token1Vault" account.
// The address that holds pool tokens for token_1
func (inst *CollectFundFee) SetToken1VaultAccount(token1Vault ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(token1Vault).WRITE()
	return inst
}

// GetToken1VaultAccount gets the "token1Vault" account.
// The address that holds pool tokens for token_1
func (inst *CollectFundFee) GetToken1VaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetVault0MintAccount sets the "vault0Mint" account.
// The mint of token_0 vault
func (inst *CollectFundFee) SetVault0MintAccount(vault0Mint ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(vault0Mint)
	return inst
}

// GetVault0MintAccount gets the "vault0Mint" account.
// The mint of token_0 vault
func (inst *CollectFundFee) GetVault0MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetVault1MintAccount sets the "vault1Mint" account.
// The mint of token_1 vault
func (inst *CollectFundFee) SetVault1MintAccount(vault1Mint ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vault1Mint)
	return inst
}

// GetVault1MintAccount gets the "vault1Mint" account.
// The mint of token_1 vault
func (inst *CollectFundFee) GetVault1MintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRecipientToken0AccountAccount sets the "recipientToken0Account" account.
// The address that receives the collected token_0 fund fees
func (inst *CollectFundFee) SetRecipientToken0AccountAccount(recipientToken0Account ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(recipientToken0Account).WRITE()
	return inst
}

// GetRecipientToken0AccountAccount gets the "recipientToken0Account" account.
// The address that receives the collected token_0 fund fees
func (inst *CollectFundFee) GetRecipientToken0AccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetRecipientToken1AccountAccount sets the "recipientToken1Account" account.
// The address that receives the collected token_1 fund fees
func (inst *CollectFundFee) SetRecipientToken1AccountAccount(recipientToken1Account ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(recipientToken1Account).WRITE()
	return inst
}

// GetRecipientToken1AccountAccount gets the "recipientToken1Account" account.
// The address that receives the collected token_1 fund fees
func (inst *CollectFundFee) GetRecipientToken1AccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
// The SPL program to perform token transfers
func (inst *CollectFundFee) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
// The SPL program to perform token transfers
func (inst *CollectFundFee) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetTokenProgram2022Account sets the "tokenProgram2022" account.
// The SPL program 2022 to perform token transfers
func (inst *CollectFundFee) SetTokenProgram2022Account(tokenProgram2022 ag_solanago.PublicKey) *CollectFundFee {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(tokenProgram2022)
	return inst
}

// GetTokenProgram2022Account gets the "tokenProgram2022" account.
// The SPL program 2022 to perform token transfers
func (inst *CollectFundFee) GetTokenProgram2022Account() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst CollectFundFee) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CollectFundFee,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CollectFundFee) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CollectFundFee) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount0Requested == nil {
			return errors.New("Amount0Requested parameter is not set")
		}
		if inst.Amount1Requested == nil {
			return errors.New("Amount1Requested parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.PoolState is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AmmConfig is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Token0Vault is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Token1Vault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Vault0Mint is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Vault1Mint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.RecipientToken0Account is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.RecipientToken1Account is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.TokenProgram2022 is not set")
		}
	}
	return nil
}

func (inst *CollectFundFee) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CollectFundFee")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount0Requested", *inst.Amount0Requested))
						paramsBranch.Child(ag_format.Param("Amount1Requested", *inst.Amount1Requested))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("           owner", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("       authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("       poolState", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       ammConfig", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     token0Vault", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     token1Vault", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("      vault0Mint", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("      vault1Mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta(" recipientToken0", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta(" recipientToken1", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("    tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("tokenProgram2022", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj CollectFundFee) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount0Requested` param:
	err = encoder.Encode(obj.Amount0Requested)
	if err != nil {
		return err
	}
	// Serialize `Amount1Requested` param:
	err = encoder.Encode(obj.Amount1Requested)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CollectFundFee) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount0Requested`:
	err = decoder.Decode(&obj.Amount0Requested)
	if err != nil {
		return err
	}
	// Deserialize `Amount1Requested`:
	err = decoder.Decode(&obj.Amount1Requested)
	if err != nil {
		return err
	}
	return nil
}

// NewCollectFundFeeInstruction declares a new CollectFundFee instruction with the provided parameters and accounts.
func NewCollectFundFeeInstruction(
	// Parameters:
	amount0Requested uint64,
	amount1Requested uint64,
	// Accounts:
	owner ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	poolState ag_solanago.PublicKey,
	ammConfig ag_solanago.PublicKey,
	token0Vault ag_solanago.PublicKey,
	token1Vault ag_solanago.PublicKey,
	vault0Mint ag_solanago.PublicKey,
	vault1Mint ag_solanago.PublicKey,
	recipientToken0Account ag_solanago.PublicKey,
	recipientToken1Account ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	tokenProgram2022 ag_solanago.PublicKey) *CollectFundFee {
	return NewCollectFundFeeInstructionBuilder().
		SetAmount0Requested(amount0Requested).
		SetAmount1Requested(amount1Requested).
		SetOwnerAccount(owner).
		SetAuthorityAccount(authority).
		SetPoolStateAccount(poolState).
		SetAmmConfigAccount(ammConfig).
		SetToken0VaultAccount(token0Vault).
		SetToken1VaultAccount(token1Vault).
		SetVault0MintAccount(vault0Mint).
		SetVault1MintAccount(vault1Mint).
		SetRecipientToken0AccountAccount(recipientToken0Account).
		SetRecipientToken1AccountAccount(recipientToken1Account).
		SetTokenProgramAccount(tokenProgram).
		SetTokenProgram2022Account(tokenProgram2022)
}
